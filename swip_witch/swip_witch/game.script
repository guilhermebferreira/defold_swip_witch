

local backgrounds = { "bg1", "bg2", "bg3" }
local background_size = 256 * 3
local coin_spawn_interval = 0.15
local block_spawn_interval = 0.5
local enemy_spawn_interval = 2
local powerup_spawn_interval = 6
local magnet_lifetime = 10

local enemy_damage = 10
local bloco_damage = 1
local max_life = 50

local margem = 20


local beginX
local beginY
local endX
local endY

local startTime = 0

local xDistance
local yDistance

local savedData
 
 
local swapSpeed = 500
local bDoingTouch
local totalSwipeDistanceLeft
local totalSwipeDistanceRight
local totalSwipeDistanceUp
local totalSwipeDistanceDown

local level_count = 0
local level_distance = 1000
local level_spacing = 1000

local wall_distance = 300
local wall_spacing = 60
local wall_blocks_quant = 10
local wall_next = wall_distance

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus") --part of shake the camera
	math.randomseed(os.time())
	self.coins_collected = 0
	self.life = 25 --life is inscresse with potion and decresse when get damage
	self.speed = 400
    self.time = 0 --time
    self.distance = 0 --distance
	self.blocos = {}
	self.powerups = {}
	self.enemys = {}
	self.coins = {}
	self.coins_to_collect = {}
	self.coin_spawn_timer = coin_spawn_interval
	self.powerup_spawn_timer = powerup_spawn_interval
	self.enemy_spawn_timer = enemy_spawn_interval
	self.player_direction = vmath.vector3()
	self.magnet_timer = 0
	msg.post("coinmagnet", "disable")
	msg.post("#coinmagnetcollisionobject", "disable")
	
	--320 / 142 player initial position
	
local my_file_path = sys.get_save_file("my_game", "data.json")
local my_table = sys.load(my_file_path)
if not my_table then
	savedData = {}
else
	
  	savedData = json.decode(my_table)
  end
  
    print(decoded) -- example of getting data
	
	--local file = sys.load_resource("data.json")
	--local decoded = {}
	
	--if file then
	--	local decoded = json.decode(file)
	--end
	
    
	 
end

function final(self)
	 
	msg.post(".", "release_input_focus")
	msg.post("camera", "release_camera_focus") --part of shake the camera
	
	local my_table = savedData
	table.insert(my_table, '{"score": {"0":"123"}}')
	local my_file_path = sys.get_save_file("my_game", "data.json")
	if not sys.save(my_file_path, my_table) then
		-- Alert user that the data could not be saved
		print('data could not be saved')
	else
		print('saved at '..tostring(my_file_path))
	end
	

end

function update(self, dt)
	
	msg.post("@render:", "draw_text", { text = "time: ", position = vmath.vector3(20, 40, 0) } )
	msg.post("@render:", "draw_text", { text = math.floor(self.time), position = vmath.vector3(100, 40, 0) } )
	
	msg.post("@render:", "draw_text", { text = "distance: ", position = vmath.vector3(20, 30, 0) } )
	msg.post("@render:", "draw_text", { text = self.distance, position = vmath.vector3(100, 30, 0) } )
	
	msg.post("@render:", "draw_text", { text = "level: ", position = vmath.vector3(20, 20, 0) } )
	msg.post("@render:", "draw_text", { text = level_count, position = vmath.vector3(100, 20, 0) } )
	
	
	label.set_text("hud#life", "Life: ".. tostring(self.life or 0))
	
	update_time_distance(self, dt)
	
	-- move background
	for _,bg in pairs(backgrounds) do
		local pos = go.get_position(bg)
		pos = pos + vmath.vector3(0, -self.speed * dt, 0)
		if pos.y <= -background_size then
			pos.y = pos.y + #backgrounds * background_size
		end
		go.set_position(pos, bg)
	end
	
	-- move coins
	for coin,_ in pairs(self.coins) do
		local pos = go.get_position(coin)
		pos = pos + vmath.vector3(0, -self.speed * dt, 0)
		go.set_position(pos, coin)
		if pos.y <= -50 then
			go.delete(coin)
			self.coins[coin] = nil
		end
	end

	-- move powerups
	for powerup,_ in pairs(self.powerups) do
		local pos = go.get_position(powerup)
		pos = pos + vmath.vector3(0, -self.speed * dt, 0)
		go.set_position(pos, powerup)
		if pos.y <= -50 then
			go.delete(powerup)
			self.powerups[powerup] = nil
		end
	end

	-- move enemy
	
	for enemy,_ in pairs(self.enemys) do
		local pos = go.get_position(enemy)
		pos = pos + vmath.vector3(0, -self.speed * dt, 0)
		go.set_position(pos, enemy)
		if pos.y <= -50 then
			go.delete(enemy)
			self.enemys[enemy] = nil
		end
	end
	
	
	-- spawn coins
	self.coin_spawn_timer = self.coin_spawn_timer - dt
	if self.coin_spawn_timer <= 0 then
		self.coin_spawn_timer = coin_spawn_interval
		local id = factory.create("#coinfactory", vmath.vector3(math.random(20, 620), 1500, 0), nil, {}, 0.25)
		self.coins[id] = true
	end
	
	-- spawn powerups
	self.powerup_spawn_timer = self.powerup_spawn_timer - dt
	if self.powerup_spawn_timer <= 0 then
		self.powerup_spawn_timer = powerup_spawn_interval
		local id = factory.create("#powerupfactory", vmath.vector3(math.random(20, 620), 1500, 0))
		self.powerups[id] = true
	end
	
	-- spawn enemy
	self.enemy_spawn_timer = self.enemy_spawn_timer - dt
	if self.enemy_spawn_timer <= 0 then
		self.enemy_spawn_timer = enemy_spawn_interval
		local id = factory.create("#enemyfactory", vmath.vector3(math.random(20, 620), 1500, 0))
		self.enemys[id] = true
	end
	
	--spawn blocos
 
 	if self.distance >= wall_next then

    	for i=wall_blocks_quant,1,-1 do
			if math.random(0, 3) > 0 then
      		local id = factory.create("#blocofactory", vmath.vector3((wall_spacing*i), 1500, 0), nil, {}, 0.5)
      		self.blocos[id] = true
			end
    	end
		wall_next = wall_next + wall_distance
	end
	
	--Increase difficulty
	if self.distance >= level_distance then
    	level_count = level_count + 1
    	self.speed = self.speed + 10
		level_distance = level_distance + level_spacing
	end
	
	-- move blocks
  for bloco,_ in pairs(self.blocos) do
    local pos = go.get_position(bloco)
    pos = pos + vmath.vector3(0, -self.speed * dt, 0)
    go.set_position(pos, bloco)
    if pos.y <= -50 then
      go.delete(bloco)
      self.blocos[bloco] = nil
    end
  end
	


  -- move player
  if self.speed > 0 then
    local player_pos = go.get_position() + self.player_direction * swapSpeed * dt
    
    player_pos.x = limite_x(player_pos.x)
	go.set_position(player_pos)

   

	-- collect coins
	for coin,_ in pairs(self.coins_to_collect) do
		local coin_pos = go.get_position(coin)
		local delta = player_pos - coin_pos
		
		go.set_position(coin_pos + delta * 5 * dt, coin)
		if vmath.length(delta) < 30 then
			go.delete(coin)
			self.coins_to_collect[coin] = nil
		end
	end
	
  end
	
	
	-- decrease magnet lifetime if active
	if self.magnet_timer > 0 then
		self.magnet_timer = self.magnet_timer - dt
		if self.magnet_timer <= 0 then
			msg.post("coinmagnet", "disable")
			msg.post("#coinmagnetcollisionobject", "disable")
		end
	end
end

function on_message(self, message_id, message, sender)
	
	if message_id == hash("collision_response") then
		if message.group == hash("coin") then
			self.coins[message.other_id] = nil
			--count collected
			get_point(self)
			if self.magnet_timer > 0 then
				self.coins_to_collect[message.other_id] = true
				-- disable the collision object on the coin
				local url = msg.url(message.other_id)
				url.fragment = "collisionobject"
				msg.post(url, "disable")
				
			else
				go.delete(message.other_id)
			end
		elseif message.group == hash("powerup") then
			self.powerups[message.other_id] = nil
			
			go.delete(message.other_id)
			self.magnet_timer = magnet_lifetime
			msg.post("coinmagnet", "enable")
			msg.post("#coinmagnetcollisionobject", "enable")
		
		elseif message.group == hash("enemy") then
			--print("Enemy hited")
			get_hited(self, enemy_damage,10)
			
			self.enemys[message.other_id] = nil
			go.delete(message.other_id)
		elseif message.group == hash("bloco") then
			--print("Block hited")
			get_hited(self, bloco_damage,8)
			
			self.blocos[message.other_id] = nil
			go.delete(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	
	
	
	--if action then
		if action.acc_x then
			label.set_text("info#info", "info: ".. tostring(action.acc_x) ..", ".. tostring(action.acc_y) ..", "..tostring(action.acc_z))
	
			if action.acc_x > 0.1 then
				self.player_direction.x = 1
			elseif action.acc_x < -0.1 then
				self.player_direction.x = -1
			else
				self.player_direction.x = 0
			end
		end
	--end
	
	
	
	
	if action_id == hash("left") then
		if action.released then
			self.player_direction.x = 0
		else
			self.player_direction.x = -1
		end
	elseif action_id == hash("right") then
		if action.released then
			self.player_direction.x = 0
		else
			self.player_direction.x = 1
		end
	end
  -- reading swipe
  if action_id == hash("click") then
	  
	  --print("click x", action.x )
	  --print("click y", action.y )
      local player_pos = go.get_position()
	   if action.x > player_pos.x then
    	  self.player_direction.x = 1
      elseif action.x < player_pos.x then
    	  self.player_direction.x = -1
      else
      	self.player_direction.x = 0
      end
    if action.pressed then
    	
    	
    elseif action.released  then
      
      self.player_direction.x = 0
    end
end


end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end


function get_point(self)
	--do things
	self.coins_collected = self.coins_collected + 1
	self.life = self.life + 1
	if self.life > max_life then
		self.life = max_life
	end
	label.set_text("hud#score", "Score: ".. tostring(self.coins_collected or 0))
	--game.set_text(game.get_node("score"), tostring(self.coins_collected or 0))
	--msg.post("menu:/menu", "update_score", { score = self.coins_collected })
	
end


function get_hited(self, damage, shake)
	--do things
	self.life = self.life - damage
	if self.life < 0 then
		self.life = 0
	end
	
	--shake the screen to visual impact
	msg.post("camera#baturinsky_shake", "shake", { shake = (damage*shake) })
	  --check if she is alive yet
	if self.life <= 0 then
    	self.speed = 0
    	msg.post("controller:/controller", "show_menu")
    end
    
    
	
end

function limite_x(x)
	if x > (640 - margem) then
		return (640 - margem)
	elseif x < margem then
		return margem
	else
		return x
	end
end




function update_time_distance(self, dt)
  self.distance = self.distance + math.floor(dt*self.speed)
  self.time = self.time + dt
  
  
	label.set_text("hud#distance", "Distance: ".. tostring(math.floor(self.distance/20)))
end


